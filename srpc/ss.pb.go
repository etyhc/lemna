// Code generated by protoc-gen-go. DO NOT EDIT.
// source: ss.proto

package srpc

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

//服务器广播消息，代理服务器会将此消息从新封装成Forward消息转给客户端
type CallMsg struct {
	Mid                  uint32   `protobuf:"varint,1,opt,name=mid,proto3" json:"mid,omitempty"`
	Raw                  []byte   `protobuf:"bytes,2,opt,name=raw,proto3" json:"raw,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CallMsg) Reset()         { *m = CallMsg{} }
func (m *CallMsg) String() string { return proto.CompactTextString(m) }
func (*CallMsg) ProtoMessage()    {}
func (*CallMsg) Descriptor() ([]byte, []int) {
	return fileDescriptor_dc711c54c28c22d7, []int{0}
}

func (m *CallMsg) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CallMsg.Unmarshal(m, b)
}
func (m *CallMsg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CallMsg.Marshal(b, m, deterministic)
}
func (m *CallMsg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CallMsg.Merge(m, src)
}
func (m *CallMsg) XXX_Size() int {
	return xxx_messageInfo_CallMsg.Size(m)
}
func (m *CallMsg) XXX_DiscardUnknown() {
	xxx_messageInfo_CallMsg.DiscardUnknown(m)
}

var xxx_messageInfo_CallMsg proto.InternalMessageInfo

func (m *CallMsg) GetMid() uint32 {
	if m != nil {
		return m.Mid
	}
	return 0
}

func (m *CallMsg) GetRaw() []byte {
	if m != nil {
		return m.Raw
	}
	return nil
}

func init() {
	proto.RegisterType((*CallMsg)(nil), "srpc.CallMsg")
}

func init() { proto.RegisterFile("ss.proto", fileDescriptor_dc711c54c28c22d7) }

var fileDescriptor_dc711c54c28c22d7 = []byte{
	// 113 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x28, 0x2e, 0xd6, 0x2b,
	0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x29, 0x2e, 0x2a, 0x48, 0x56, 0xd2, 0xe5, 0x62, 0x77, 0x4e,
	0xcc, 0xc9, 0xf1, 0x2d, 0x4e, 0x17, 0x12, 0xe0, 0x62, 0xce, 0xcd, 0x4c, 0x91, 0x60, 0x54, 0x60,
	0xd4, 0xe0, 0x0d, 0x02, 0x31, 0x41, 0x22, 0x45, 0x89, 0xe5, 0x12, 0x4c, 0x0a, 0x8c, 0x1a, 0x3c,
	0x41, 0x20, 0xa6, 0x91, 0x1e, 0x17, 0x4b, 0x70, 0x49, 0x7e, 0xb0, 0x90, 0x1a, 0x17, 0x0b, 0x48,
	0x9b, 0x10, 0xaf, 0x1e, 0xc8, 0x14, 0x3d, 0xa8, 0x11, 0x52, 0xa8, 0x5c, 0x25, 0x86, 0x24, 0x36,
	0xb0, 0x5d, 0xc6, 0x80, 0x00, 0x00, 0x00, 0xff, 0xff, 0x2f, 0xcb, 0xf8, 0x93, 0x77, 0x00, 0x00,
	0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// StoSClient is the client API for StoS service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type StoSClient interface {
	//服务器发送、接收客户端的消息
	Call(ctx context.Context, in *CallMsg, opts ...grpc.CallOption) (*CallMsg, error)
}

type stoSClient struct {
	cc *grpc.ClientConn
}

func NewStoSClient(cc *grpc.ClientConn) StoSClient {
	return &stoSClient{cc}
}

func (c *stoSClient) Call(ctx context.Context, in *CallMsg, opts ...grpc.CallOption) (*CallMsg, error) {
	out := new(CallMsg)
	err := c.cc.Invoke(ctx, "/srpc.StoS/Call", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// StoSServer is the server API for StoS service.
type StoSServer interface {
	//服务器发送、接收客户端的消息
	Call(context.Context, *CallMsg) (*CallMsg, error)
}

// UnimplementedStoSServer can be embedded to have forward compatible implementations.
type UnimplementedStoSServer struct {
}

func (*UnimplementedStoSServer) Call(ctx context.Context, req *CallMsg) (*CallMsg, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Call not implemented")
}

func RegisterStoSServer(s *grpc.Server, srv StoSServer) {
	s.RegisterService(&_StoS_serviceDesc, srv)
}

func _StoS_Call_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CallMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StoSServer).Call(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/srpc.StoS/Call",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StoSServer).Call(ctx, req.(*CallMsg))
	}
	return interceptor(ctx, in, info, handler)
}

var _StoS_serviceDesc = grpc.ServiceDesc{
	ServiceName: "srpc.StoS",
	HandlerType: (*StoSServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Call",
			Handler:    _StoS_Call_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "ss.proto",
}
