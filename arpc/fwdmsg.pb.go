// Code generated by protoc-gen-go. DO NOT EDIT.
// source: fwdmsg.proto

package arpc

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

//====转发消息定义=====
type RawMsg struct {
	Mid                  uint32   `protobuf:"varint,1,opt,name=mid,proto3" json:"mid,omitempty"`
	Raw                  []byte   `protobuf:"bytes,2,opt,name=raw,proto3" json:"raw,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RawMsg) Reset()         { *m = RawMsg{} }
func (m *RawMsg) String() string { return proto.CompactTextString(m) }
func (*RawMsg) ProtoMessage()    {}
func (*RawMsg) Descriptor() ([]byte, []int) {
	return fileDescriptor_f86edd763a13a66e, []int{0}
}

func (m *RawMsg) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RawMsg.Unmarshal(m, b)
}
func (m *RawMsg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RawMsg.Marshal(b, m, deterministic)
}
func (m *RawMsg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RawMsg.Merge(m, src)
}
func (m *RawMsg) XXX_Size() int {
	return xxx_messageInfo_RawMsg.Size(m)
}
func (m *RawMsg) XXX_DiscardUnknown() {
	xxx_messageInfo_RawMsg.DiscardUnknown(m)
}

var xxx_messageInfo_RawMsg proto.InternalMessageInfo

func (m *RawMsg) GetMid() uint32 {
	if m != nil {
		return m.Mid
	}
	return 0
}

func (m *RawMsg) GetRaw() []byte {
	if m != nil {
		return m.Raw
	}
	return nil
}

type ForwardMsg struct {
	Target               uint32   `protobuf:"varint,1,opt,name=target,proto3" json:"target,omitempty"`
	Msg                  *RawMsg  `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ForwardMsg) Reset()         { *m = ForwardMsg{} }
func (m *ForwardMsg) String() string { return proto.CompactTextString(m) }
func (*ForwardMsg) ProtoMessage()    {}
func (*ForwardMsg) Descriptor() ([]byte, []int) {
	return fileDescriptor_f86edd763a13a66e, []int{1}
}

func (m *ForwardMsg) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ForwardMsg.Unmarshal(m, b)
}
func (m *ForwardMsg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ForwardMsg.Marshal(b, m, deterministic)
}
func (m *ForwardMsg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ForwardMsg.Merge(m, src)
}
func (m *ForwardMsg) XXX_Size() int {
	return xxx_messageInfo_ForwardMsg.Size(m)
}
func (m *ForwardMsg) XXX_DiscardUnknown() {
	xxx_messageInfo_ForwardMsg.DiscardUnknown(m)
}

var xxx_messageInfo_ForwardMsg proto.InternalMessageInfo

func (m *ForwardMsg) GetTarget() uint32 {
	if m != nil {
		return m.Target
	}
	return 0
}

func (m *ForwardMsg) GetMsg() *RawMsg {
	if m != nil {
		return m.Msg
	}
	return nil
}

func init() {
	proto.RegisterType((*RawMsg)(nil), "arpc.RawMsg")
	proto.RegisterType((*ForwardMsg)(nil), "arpc.ForwardMsg")
}

func init() { proto.RegisterFile("fwdmsg.proto", fileDescriptor_f86edd763a13a66e) }

var fileDescriptor_f86edd763a13a66e = []byte{
	// 136 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x49, 0x2b, 0x4f, 0xc9,
	0x2d, 0x4e, 0xd7, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x49, 0x2c, 0x2a, 0x48, 0x56, 0xd2,
	0xe1, 0x62, 0x0b, 0x4a, 0x2c, 0xf7, 0x2d, 0x4e, 0x17, 0x12, 0xe0, 0x62, 0xce, 0xcd, 0x4c, 0x91,
	0x60, 0x54, 0x60, 0xd4, 0xe0, 0x0d, 0x02, 0x31, 0x41, 0x22, 0x45, 0x89, 0xe5, 0x12, 0x4c, 0x0a,
	0x8c, 0x1a, 0x3c, 0x41, 0x20, 0xa6, 0x92, 0x0b, 0x17, 0x97, 0x5b, 0x7e, 0x51, 0x79, 0x62, 0x51,
	0x0a, 0x48, 0x87, 0x18, 0x17, 0x5b, 0x49, 0x62, 0x51, 0x7a, 0x6a, 0x09, 0x54, 0x13, 0x94, 0x27,
	0x24, 0xc7, 0xc5, 0x9c, 0x5b, 0x9c, 0x0e, 0xd6, 0xc7, 0x6d, 0xc4, 0xa3, 0x07, 0xb2, 0x47, 0x0f,
	0x62, 0x49, 0x10, 0x48, 0x22, 0x89, 0x0d, 0xec, 0x00, 0x63, 0x40, 0x00, 0x00, 0x00, 0xff, 0xff,
	0x59, 0xcd, 0xc9, 0x0b, 0x90, 0x00, 0x00, 0x00,
}
