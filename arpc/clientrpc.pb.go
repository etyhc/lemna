// Code generated by protoc-gen-go. DO NOT EDIT.
// source: clientrpc.proto

package arpc

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type LoginMsg struct {
	Token                string   `protobuf:"bytes,1,opt,name=token,proto3" json:"token,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *LoginMsg) Reset()         { *m = LoginMsg{} }
func (m *LoginMsg) String() string { return proto.CompactTextString(m) }
func (*LoginMsg) ProtoMessage()    {}
func (*LoginMsg) Descriptor() ([]byte, []int) {
	return fileDescriptor_b1249944c579c2db, []int{0}
}

func (m *LoginMsg) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_LoginMsg.Unmarshal(m, b)
}
func (m *LoginMsg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_LoginMsg.Marshal(b, m, deterministic)
}
func (m *LoginMsg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LoginMsg.Merge(m, src)
}
func (m *LoginMsg) XXX_Size() int {
	return xxx_messageInfo_LoginMsg.Size(m)
}
func (m *LoginMsg) XXX_DiscardUnknown() {
	xxx_messageInfo_LoginMsg.DiscardUnknown(m)
}

var xxx_messageInfo_LoginMsg proto.InternalMessageInfo

func (m *LoginMsg) GetToken() string {
	if m != nil {
		return m.Token
	}
	return ""
}

func init() {
	proto.RegisterType((*LoginMsg)(nil), "arpc.LoginMsg")
}

func init() { proto.RegisterFile("clientrpc.proto", fileDescriptor_b1249944c579c2db) }

var fileDescriptor_b1249944c579c2db = []byte{
	// 167 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x4f, 0xce, 0xc9, 0x4c,
	0xcd, 0x2b, 0x29, 0x2a, 0x48, 0xd6, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x49, 0x2c, 0x2a,
	0x48, 0x96, 0xe2, 0x49, 0x2b, 0x4f, 0xc9, 0x2d, 0x4e, 0x87, 0x88, 0x29, 0x29, 0x70, 0x71, 0xf8,
	0xe4, 0xa7, 0x67, 0xe6, 0xf9, 0x16, 0xa7, 0x0b, 0x89, 0x70, 0xb1, 0x96, 0xe4, 0x67, 0xa7, 0xe6,
	0x49, 0x30, 0x2a, 0x30, 0x6a, 0x70, 0x06, 0x41, 0x38, 0x46, 0x13, 0x19, 0xb9, 0x58, 0x9c, 0x8b,
	0x0a, 0x92, 0x85, 0x34, 0xb9, 0x58, 0xc1, 0x4a, 0x85, 0xf8, 0xf4, 0x40, 0x06, 0xe9, 0xc1, 0xf4,
	0x49, 0xa1, 0xf1, 0x95, 0x18, 0x84, 0x8c, 0xb9, 0xd8, 0xdd, 0xf2, 0x8b, 0xca, 0x13, 0x8b, 0x52,
	0x84, 0x04, 0x20, 0x92, 0x50, 0x2e, 0x48, 0x39, 0x86, 0x88, 0x12, 0x83, 0x06, 0xa3, 0x01, 0x23,
	0xc8, 0x7c, 0xff, 0x92, 0x8c, 0xd4, 0x22, 0x21, 0x1e, 0x88, 0x82, 0xa0, 0xc4, 0x72, 0x90, 0x72,
	0x14, 0x1e, 0x44, 0x69, 0x12, 0x1b, 0xd8, 0xf1, 0xc6, 0x80, 0x00, 0x00, 0x00, 0xff, 0xff, 0x2a,
	0x36, 0x50, 0xcd, 0xe3, 0x00, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// CrpcClient is the client API for Crpc service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type CrpcClient interface {
	//客户端登陆代理
	Login(ctx context.Context, in *LoginMsg, opts ...grpc.CallOption) (*LoginMsg, error)
	//客户端发送、接收服务器的消息
	Forward(ctx context.Context, opts ...grpc.CallOption) (Crpc_ForwardClient, error)
	//客户端与代理交互rpc
	Other(ctx context.Context, opts ...grpc.CallOption) (Crpc_OtherClient, error)
}

type crpcClient struct {
	cc *grpc.ClientConn
}

func NewCrpcClient(cc *grpc.ClientConn) CrpcClient {
	return &crpcClient{cc}
}

func (c *crpcClient) Login(ctx context.Context, in *LoginMsg, opts ...grpc.CallOption) (*LoginMsg, error) {
	out := new(LoginMsg)
	err := c.cc.Invoke(ctx, "/arpc.Crpc/Login", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *crpcClient) Forward(ctx context.Context, opts ...grpc.CallOption) (Crpc_ForwardClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Crpc_serviceDesc.Streams[0], "/arpc.Crpc/Forward", opts...)
	if err != nil {
		return nil, err
	}
	x := &crpcForwardClient{stream}
	return x, nil
}

type Crpc_ForwardClient interface {
	Send(*ForwardMsg) error
	Recv() (*ForwardMsg, error)
	grpc.ClientStream
}

type crpcForwardClient struct {
	grpc.ClientStream
}

func (x *crpcForwardClient) Send(m *ForwardMsg) error {
	return x.ClientStream.SendMsg(m)
}

func (x *crpcForwardClient) Recv() (*ForwardMsg, error) {
	m := new(ForwardMsg)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *crpcClient) Other(ctx context.Context, opts ...grpc.CallOption) (Crpc_OtherClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Crpc_serviceDesc.Streams[1], "/arpc.Crpc/Other", opts...)
	if err != nil {
		return nil, err
	}
	x := &crpcOtherClient{stream}
	return x, nil
}

type Crpc_OtherClient interface {
	Send(*RawMsg) error
	Recv() (*RawMsg, error)
	grpc.ClientStream
}

type crpcOtherClient struct {
	grpc.ClientStream
}

func (x *crpcOtherClient) Send(m *RawMsg) error {
	return x.ClientStream.SendMsg(m)
}

func (x *crpcOtherClient) Recv() (*RawMsg, error) {
	m := new(RawMsg)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// CrpcServer is the server API for Crpc service.
type CrpcServer interface {
	//客户端登陆代理
	Login(context.Context, *LoginMsg) (*LoginMsg, error)
	//客户端发送、接收服务器的消息
	Forward(Crpc_ForwardServer) error
	//客户端与代理交互rpc
	Other(Crpc_OtherServer) error
}

// UnimplementedCrpcServer can be embedded to have forward compatible implementations.
type UnimplementedCrpcServer struct {
}

func (*UnimplementedCrpcServer) Login(ctx context.Context, req *LoginMsg) (*LoginMsg, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Login not implemented")
}
func (*UnimplementedCrpcServer) Forward(srv Crpc_ForwardServer) error {
	return status.Errorf(codes.Unimplemented, "method Forward not implemented")
}
func (*UnimplementedCrpcServer) Other(srv Crpc_OtherServer) error {
	return status.Errorf(codes.Unimplemented, "method Other not implemented")
}

func RegisterCrpcServer(s *grpc.Server, srv CrpcServer) {
	s.RegisterService(&_Crpc_serviceDesc, srv)
}

func _Crpc_Login_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CrpcServer).Login(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/arpc.Crpc/Login",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CrpcServer).Login(ctx, req.(*LoginMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _Crpc_Forward_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(CrpcServer).Forward(&crpcForwardServer{stream})
}

type Crpc_ForwardServer interface {
	Send(*ForwardMsg) error
	Recv() (*ForwardMsg, error)
	grpc.ServerStream
}

type crpcForwardServer struct {
	grpc.ServerStream
}

func (x *crpcForwardServer) Send(m *ForwardMsg) error {
	return x.ServerStream.SendMsg(m)
}

func (x *crpcForwardServer) Recv() (*ForwardMsg, error) {
	m := new(ForwardMsg)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Crpc_Other_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(CrpcServer).Other(&crpcOtherServer{stream})
}

type Crpc_OtherServer interface {
	Send(*RawMsg) error
	Recv() (*RawMsg, error)
	grpc.ServerStream
}

type crpcOtherServer struct {
	grpc.ServerStream
}

func (x *crpcOtherServer) Send(m *RawMsg) error {
	return x.ServerStream.SendMsg(m)
}

func (x *crpcOtherServer) Recv() (*RawMsg, error) {
	m := new(RawMsg)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _Crpc_serviceDesc = grpc.ServiceDesc{
	ServiceName: "arpc.Crpc",
	HandlerType: (*CrpcServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Login",
			Handler:    _Crpc_Login_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Forward",
			Handler:       _Crpc_Forward_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "Other",
			Handler:       _Crpc_Other_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "clientrpc.proto",
}
