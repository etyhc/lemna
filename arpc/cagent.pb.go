// Code generated by protoc-gen-go. DO NOT EDIT.
// source: cagent.proto

package arpc

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type LoginMsg struct {
	Token                string   `protobuf:"bytes,1,opt,name=token,proto3" json:"token,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *LoginMsg) Reset()         { *m = LoginMsg{} }
func (m *LoginMsg) String() string { return proto.CompactTextString(m) }
func (*LoginMsg) ProtoMessage()    {}
func (*LoginMsg) Descriptor() ([]byte, []int) {
	return fileDescriptor_5791ad382e5d6ace, []int{0}
}

func (m *LoginMsg) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_LoginMsg.Unmarshal(m, b)
}
func (m *LoginMsg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_LoginMsg.Marshal(b, m, deterministic)
}
func (m *LoginMsg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LoginMsg.Merge(m, src)
}
func (m *LoginMsg) XXX_Size() int {
	return xxx_messageInfo_LoginMsg.Size(m)
}
func (m *LoginMsg) XXX_DiscardUnknown() {
	xxx_messageInfo_LoginMsg.DiscardUnknown(m)
}

var xxx_messageInfo_LoginMsg proto.InternalMessageInfo

func (m *LoginMsg) GetToken() string {
	if m != nil {
		return m.Token
	}
	return ""
}

func init() {
	proto.RegisterType((*LoginMsg)(nil), "arpc.LoginMsg")
}

func init() { proto.RegisterFile("cagent.proto", fileDescriptor_5791ad382e5d6ace) }

var fileDescriptor_5791ad382e5d6ace = []byte{
	// 164 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x49, 0x4e, 0x4c, 0x4f,
	0xcd, 0x2b, 0xd1, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x49, 0x2c, 0x2a, 0x48, 0x96, 0xe2,
	0x49, 0x2b, 0x4f, 0xc9, 0x2d, 0x4e, 0x87, 0x88, 0x29, 0x29, 0x70, 0x71, 0xf8, 0xe4, 0xa7, 0x67,
	0xe6, 0xf9, 0x16, 0xa7, 0x0b, 0x89, 0x70, 0xb1, 0x96, 0xe4, 0x67, 0xa7, 0xe6, 0x49, 0x30, 0x2a,
	0x30, 0x6a, 0x70, 0x06, 0x41, 0x38, 0x46, 0x7d, 0x8c, 0x5c, 0x6c, 0xce, 0x8e, 0x20, 0x63, 0x84,
	0x34, 0xb9, 0x58, 0xc1, 0x8a, 0x85, 0xf8, 0xf4, 0x40, 0x46, 0xe9, 0xc1, 0x74, 0x4a, 0xa1, 0xf1,
	0x95, 0x18, 0x84, 0x8c, 0xb9, 0xd8, 0xdd, 0xf2, 0x8b, 0xca, 0x13, 0x8b, 0x52, 0x84, 0x04, 0x20,
	0x92, 0x50, 0x2e, 0x48, 0x39, 0x86, 0x88, 0x12, 0x83, 0x06, 0xa3, 0x01, 0xa3, 0x90, 0x0a, 0x17,
	0x8b, 0x73, 0x62, 0x4e, 0x8e, 0x10, 0x0f, 0x44, 0x3e, 0x28, 0xb1, 0x1c, 0xa4, 0x1a, 0x85, 0xa7,
	0xc4, 0x90, 0xc4, 0x06, 0x76, 0xb9, 0x31, 0x20, 0x00, 0x00, 0xff, 0xff, 0x09, 0x10, 0x10, 0x76,
	0xdd, 0x00, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// CAgentClient is the client API for CAgent service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type CAgentClient interface {
	//客户端登陆代理
	Login(ctx context.Context, in *LoginMsg, opts ...grpc.CallOption) (*LoginMsg, error)
	//客户端发送、接收服务器的消息
	Forward(ctx context.Context, opts ...grpc.CallOption) (CAgent_ForwardClient, error)
	//客户端与代理交互rpc
	Call(ctx context.Context, in *RawMsg, opts ...grpc.CallOption) (*RawMsg, error)
}

type cAgentClient struct {
	cc *grpc.ClientConn
}

func NewCAgentClient(cc *grpc.ClientConn) CAgentClient {
	return &cAgentClient{cc}
}

func (c *cAgentClient) Login(ctx context.Context, in *LoginMsg, opts ...grpc.CallOption) (*LoginMsg, error) {
	out := new(LoginMsg)
	err := c.cc.Invoke(ctx, "/arpc.CAgent/Login", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cAgentClient) Forward(ctx context.Context, opts ...grpc.CallOption) (CAgent_ForwardClient, error) {
	stream, err := c.cc.NewStream(ctx, &_CAgent_serviceDesc.Streams[0], "/arpc.CAgent/Forward", opts...)
	if err != nil {
		return nil, err
	}
	x := &cAgentForwardClient{stream}
	return x, nil
}

type CAgent_ForwardClient interface {
	Send(*ForwardMsg) error
	Recv() (*ForwardMsg, error)
	grpc.ClientStream
}

type cAgentForwardClient struct {
	grpc.ClientStream
}

func (x *cAgentForwardClient) Send(m *ForwardMsg) error {
	return x.ClientStream.SendMsg(m)
}

func (x *cAgentForwardClient) Recv() (*ForwardMsg, error) {
	m := new(ForwardMsg)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *cAgentClient) Call(ctx context.Context, in *RawMsg, opts ...grpc.CallOption) (*RawMsg, error) {
	out := new(RawMsg)
	err := c.cc.Invoke(ctx, "/arpc.CAgent/Call", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CAgentServer is the server API for CAgent service.
type CAgentServer interface {
	//客户端登陆代理
	Login(context.Context, *LoginMsg) (*LoginMsg, error)
	//客户端发送、接收服务器的消息
	Forward(CAgent_ForwardServer) error
	//客户端与代理交互rpc
	Call(context.Context, *RawMsg) (*RawMsg, error)
}

// UnimplementedCAgentServer can be embedded to have forward compatible implementations.
type UnimplementedCAgentServer struct {
}

func (*UnimplementedCAgentServer) Login(ctx context.Context, req *LoginMsg) (*LoginMsg, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Login not implemented")
}
func (*UnimplementedCAgentServer) Forward(srv CAgent_ForwardServer) error {
	return status.Errorf(codes.Unimplemented, "method Forward not implemented")
}
func (*UnimplementedCAgentServer) Call(ctx context.Context, req *RawMsg) (*RawMsg, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Call not implemented")
}

func RegisterCAgentServer(s *grpc.Server, srv CAgentServer) {
	s.RegisterService(&_CAgent_serviceDesc, srv)
}

func _CAgent_Login_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CAgentServer).Login(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/arpc.CAgent/Login",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CAgentServer).Login(ctx, req.(*LoginMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _CAgent_Forward_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(CAgentServer).Forward(&cAgentForwardServer{stream})
}

type CAgent_ForwardServer interface {
	Send(*ForwardMsg) error
	Recv() (*ForwardMsg, error)
	grpc.ServerStream
}

type cAgentForwardServer struct {
	grpc.ServerStream
}

func (x *cAgentForwardServer) Send(m *ForwardMsg) error {
	return x.ServerStream.SendMsg(m)
}

func (x *cAgentForwardServer) Recv() (*ForwardMsg, error) {
	m := new(ForwardMsg)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _CAgent_Call_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RawMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CAgentServer).Call(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/arpc.CAgent/Call",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CAgentServer).Call(ctx, req.(*RawMsg))
	}
	return interceptor(ctx, in, info, handler)
}

var _CAgent_serviceDesc = grpc.ServiceDesc{
	ServiceName: "arpc.CAgent",
	HandlerType: (*CAgentServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Login",
			Handler:    _CAgent_Login_Handler,
		},
		{
			MethodName: "Call",
			Handler:    _CAgent_Call_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Forward",
			Handler:       _CAgent_Forward_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "cagent.proto",
}
