// Code generated by protoc-gen-go. DO NOT EDIT.
// source: agent.proto

package arpc

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// ====转发消息定义=====
type RawMsg struct {
	Type                 uint32   `protobuf:"varint,1,opt,name=type,proto3" json:"type,omitempty"`
	Raw                  []byte   `protobuf:"bytes,2,opt,name=raw,proto3" json:"raw,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RawMsg) Reset()         { *m = RawMsg{} }
func (m *RawMsg) String() string { return proto.CompactTextString(m) }
func (*RawMsg) ProtoMessage()    {}
func (*RawMsg) Descriptor() ([]byte, []int) {
	return fileDescriptor_agent_616d0cfb03e142b2, []int{0}
}
func (m *RawMsg) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RawMsg.Unmarshal(m, b)
}
func (m *RawMsg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RawMsg.Marshal(b, m, deterministic)
}
func (dst *RawMsg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RawMsg.Merge(dst, src)
}
func (m *RawMsg) XXX_Size() int {
	return xxx_messageInfo_RawMsg.Size(m)
}
func (m *RawMsg) XXX_DiscardUnknown() {
	xxx_messageInfo_RawMsg.DiscardUnknown(m)
}

var xxx_messageInfo_RawMsg proto.InternalMessageInfo

func (m *RawMsg) GetType() uint32 {
	if m != nil {
		return m.Type
	}
	return 0
}

func (m *RawMsg) GetRaw() []byte {
	if m != nil {
		return m.Raw
	}
	return nil
}

type ForwardMsg struct {
	Target               uint32   `protobuf:"varint,1,opt,name=target,proto3" json:"target,omitempty"`
	Msg                  *RawMsg  `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ForwardMsg) Reset()         { *m = ForwardMsg{} }
func (m *ForwardMsg) String() string { return proto.CompactTextString(m) }
func (*ForwardMsg) ProtoMessage()    {}
func (*ForwardMsg) Descriptor() ([]byte, []int) {
	return fileDescriptor_agent_616d0cfb03e142b2, []int{1}
}
func (m *ForwardMsg) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ForwardMsg.Unmarshal(m, b)
}
func (m *ForwardMsg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ForwardMsg.Marshal(b, m, deterministic)
}
func (dst *ForwardMsg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ForwardMsg.Merge(dst, src)
}
func (m *ForwardMsg) XXX_Size() int {
	return xxx_messageInfo_ForwardMsg.Size(m)
}
func (m *ForwardMsg) XXX_DiscardUnknown() {
	xxx_messageInfo_ForwardMsg.DiscardUnknown(m)
}

var xxx_messageInfo_ForwardMsg proto.InternalMessageInfo

func (m *ForwardMsg) GetTarget() uint32 {
	if m != nil {
		return m.Target
	}
	return 0
}

func (m *ForwardMsg) GetMsg() *RawMsg {
	if m != nil {
		return m.Msg
	}
	return nil
}

type LoginMsg struct {
	Token                string   `protobuf:"bytes,1,opt,name=token,proto3" json:"token,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *LoginMsg) Reset()         { *m = LoginMsg{} }
func (m *LoginMsg) String() string { return proto.CompactTextString(m) }
func (*LoginMsg) ProtoMessage()    {}
func (*LoginMsg) Descriptor() ([]byte, []int) {
	return fileDescriptor_agent_616d0cfb03e142b2, []int{2}
}
func (m *LoginMsg) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_LoginMsg.Unmarshal(m, b)
}
func (m *LoginMsg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_LoginMsg.Marshal(b, m, deterministic)
}
func (dst *LoginMsg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LoginMsg.Merge(dst, src)
}
func (m *LoginMsg) XXX_Size() int {
	return xxx_messageInfo_LoginMsg.Size(m)
}
func (m *LoginMsg) XXX_DiscardUnknown() {
	xxx_messageInfo_LoginMsg.DiscardUnknown(m)
}

var xxx_messageInfo_LoginMsg proto.InternalMessageInfo

func (m *LoginMsg) GetToken() string {
	if m != nil {
		return m.Token
	}
	return ""
}

// 服务器广播消息，代理服务器会将此消息从新封装成Forward消息转给客户端
type BroadcastMsg struct {
	Targets              []uint32 `protobuf:"varint,1,rep,packed,name=targets,proto3" json:"targets,omitempty"`
	Msg                  *RawMsg  `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *BroadcastMsg) Reset()         { *m = BroadcastMsg{} }
func (m *BroadcastMsg) String() string { return proto.CompactTextString(m) }
func (*BroadcastMsg) ProtoMessage()    {}
func (*BroadcastMsg) Descriptor() ([]byte, []int) {
	return fileDescriptor_agent_616d0cfb03e142b2, []int{3}
}
func (m *BroadcastMsg) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_BroadcastMsg.Unmarshal(m, b)
}
func (m *BroadcastMsg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_BroadcastMsg.Marshal(b, m, deterministic)
}
func (dst *BroadcastMsg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BroadcastMsg.Merge(dst, src)
}
func (m *BroadcastMsg) XXX_Size() int {
	return xxx_messageInfo_BroadcastMsg.Size(m)
}
func (m *BroadcastMsg) XXX_DiscardUnknown() {
	xxx_messageInfo_BroadcastMsg.DiscardUnknown(m)
}

var xxx_messageInfo_BroadcastMsg proto.InternalMessageInfo

func (m *BroadcastMsg) GetTargets() []uint32 {
	if m != nil {
		return m.Targets
	}
	return nil
}

func (m *BroadcastMsg) GetMsg() *RawMsg {
	if m != nil {
		return m.Msg
	}
	return nil
}

func init() {
	proto.RegisterType((*RawMsg)(nil), "arpc.RawMsg")
	proto.RegisterType((*ForwardMsg)(nil), "arpc.ForwardMsg")
	proto.RegisterType((*LoginMsg)(nil), "arpc.LoginMsg")
	proto.RegisterType((*BroadcastMsg)(nil), "arpc.BroadcastMsg")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// ClientClient is the client API for Client service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ClientClient interface {
	Login(ctx context.Context, in *LoginMsg, opts ...grpc.CallOption) (*LoginMsg, error)
	Forward(ctx context.Context, opts ...grpc.CallOption) (Client_ForwardClient, error)
}

type clientClient struct {
	cc *grpc.ClientConn
}

func NewClientClient(cc *grpc.ClientConn) ClientClient {
	return &clientClient{cc}
}

func (c *clientClient) Login(ctx context.Context, in *LoginMsg, opts ...grpc.CallOption) (*LoginMsg, error) {
	out := new(LoginMsg)
	err := c.cc.Invoke(ctx, "/arpc.Client/Login", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientClient) Forward(ctx context.Context, opts ...grpc.CallOption) (Client_ForwardClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Client_serviceDesc.Streams[0], "/arpc.Client/Forward", opts...)
	if err != nil {
		return nil, err
	}
	x := &clientForwardClient{stream}
	return x, nil
}

type Client_ForwardClient interface {
	Send(*ForwardMsg) error
	Recv() (*ForwardMsg, error)
	grpc.ClientStream
}

type clientForwardClient struct {
	grpc.ClientStream
}

func (x *clientForwardClient) Send(m *ForwardMsg) error {
	return x.ClientStream.SendMsg(m)
}

func (x *clientForwardClient) Recv() (*ForwardMsg, error) {
	m := new(ForwardMsg)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ClientServer is the server API for Client service.
type ClientServer interface {
	Login(context.Context, *LoginMsg) (*LoginMsg, error)
	Forward(Client_ForwardServer) error
}

func RegisterClientServer(s *grpc.Server, srv ClientServer) {
	s.RegisterService(&_Client_serviceDesc, srv)
}

func _Client_Login_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientServer).Login(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/arpc.Client/Login",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientServer).Login(ctx, req.(*LoginMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _Client_Forward_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ClientServer).Forward(&clientForwardServer{stream})
}

type Client_ForwardServer interface {
	Send(*ForwardMsg) error
	Recv() (*ForwardMsg, error)
	grpc.ServerStream
}

type clientForwardServer struct {
	grpc.ServerStream
}

func (x *clientForwardServer) Send(m *ForwardMsg) error {
	return x.ServerStream.SendMsg(m)
}

func (x *clientForwardServer) Recv() (*ForwardMsg, error) {
	m := new(ForwardMsg)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _Client_serviceDesc = grpc.ServiceDesc{
	ServiceName: "arpc.Client",
	HandlerType: (*ClientServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Login",
			Handler:    _Client_Login_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Forward",
			Handler:       _Client_Forward_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "agent.proto",
}

// ServerClient is the client API for Server service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ServerClient interface {
	Forward(ctx context.Context, opts ...grpc.CallOption) (Server_ForwardClient, error)
}

type serverClient struct {
	cc *grpc.ClientConn
}

func NewServerClient(cc *grpc.ClientConn) ServerClient {
	return &serverClient{cc}
}

func (c *serverClient) Forward(ctx context.Context, opts ...grpc.CallOption) (Server_ForwardClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Server_serviceDesc.Streams[0], "/arpc.Server/Forward", opts...)
	if err != nil {
		return nil, err
	}
	x := &serverForwardClient{stream}
	return x, nil
}

type Server_ForwardClient interface {
	Send(*ForwardMsg) error
	Recv() (*BroadcastMsg, error)
	grpc.ClientStream
}

type serverForwardClient struct {
	grpc.ClientStream
}

func (x *serverForwardClient) Send(m *ForwardMsg) error {
	return x.ClientStream.SendMsg(m)
}

func (x *serverForwardClient) Recv() (*BroadcastMsg, error) {
	m := new(BroadcastMsg)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ServerServer is the server API for Server service.
type ServerServer interface {
	Forward(Server_ForwardServer) error
}

func RegisterServerServer(s *grpc.Server, srv ServerServer) {
	s.RegisterService(&_Server_serviceDesc, srv)
}

func _Server_Forward_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ServerServer).Forward(&serverForwardServer{stream})
}

type Server_ForwardServer interface {
	Send(*BroadcastMsg) error
	Recv() (*ForwardMsg, error)
	grpc.ServerStream
}

type serverForwardServer struct {
	grpc.ServerStream
}

func (x *serverForwardServer) Send(m *BroadcastMsg) error {
	return x.ServerStream.SendMsg(m)
}

func (x *serverForwardServer) Recv() (*ForwardMsg, error) {
	m := new(ForwardMsg)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _Server_serviceDesc = grpc.ServiceDesc{
	ServiceName: "arpc.Server",
	HandlerType: (*ServerServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Forward",
			Handler:       _Server_Forward_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "agent.proto",
}

func init() { proto.RegisterFile("agent.proto", fileDescriptor_agent_616d0cfb03e142b2) }

var fileDescriptor_agent_616d0cfb03e142b2 = []byte{
	// 256 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x51, 0x4d, 0x4b, 0x03, 0x31,
	0x10, 0x6d, 0xdc, 0x36, 0xd5, 0xe9, 0x56, 0xca, 0x20, 0xb2, 0xf4, 0x20, 0x4b, 0x4e, 0xeb, 0x65,
	0x91, 0x2d, 0x9e, 0x05, 0x15, 0xf1, 0xa0, 0x97, 0xf8, 0x0b, 0x62, 0x1b, 0x62, 0x51, 0x37, 0xcb,
	0x24, 0xb8, 0xf8, 0xef, 0x25, 0xc9, 0x16, 0x45, 0xc1, 0xde, 0xe6, 0xcd, 0xbc, 0x8f, 0x3c, 0x02,
	0x33, 0x65, 0x74, 0xeb, 0xeb, 0x8e, 0xac, 0xb7, 0x38, 0x56, 0xd4, 0xad, 0x45, 0x0d, 0x5c, 0xaa,
	0xfe, 0xd1, 0x19, 0x44, 0x18, 0xfb, 0xcf, 0x4e, 0x17, 0xac, 0x64, 0xd5, 0x5c, 0xc6, 0x19, 0x17,
	0x90, 0x91, 0xea, 0x8b, 0x83, 0x92, 0x55, 0xb9, 0x0c, 0xa3, 0xb8, 0x05, 0xb8, 0xb3, 0xd4, 0x2b,
	0xda, 0x04, 0xcd, 0x29, 0x70, 0xaf, 0xc8, 0x68, 0x3f, 0xa8, 0x06, 0x84, 0x67, 0x90, 0xbd, 0x3b,
	0x13, 0x75, 0xb3, 0x26, 0xaf, 0x43, 0x52, 0x9d, 0x62, 0x64, 0x38, 0x88, 0x12, 0x0e, 0x1f, 0xac,
	0xd9, 0xb6, 0xc1, 0xe3, 0x04, 0x26, 0xde, 0xbe, 0xea, 0x36, 0x5a, 0x1c, 0xc9, 0x04, 0xc4, 0x3d,
	0xe4, 0xd7, 0x64, 0xd5, 0x66, 0xad, 0x9c, 0x0f, 0xac, 0x02, 0xa6, 0xc9, 0xdb, 0x15, 0xac, 0xcc,
	0xaa, 0xb9, 0xdc, 0xc1, 0x7d, 0x59, 0xcd, 0x0b, 0xf0, 0x9b, 0xb7, 0xad, 0x6e, 0x3d, 0x9e, 0xc3,
	0x24, 0xa6, 0xe2, 0x71, 0x62, 0xed, 0x9e, 0xb0, 0xfc, 0x85, 0xc5, 0x08, 0x57, 0x30, 0x1d, 0x6a,
	0xe2, 0x22, 0x1d, 0xbf, 0x5b, 0x2f, 0xff, 0x6c, 0xc4, 0xa8, 0x62, 0x17, 0xac, 0xb9, 0x02, 0xfe,
	0xa4, 0xe9, 0x43, 0x13, 0x5e, 0xfe, 0x27, 0xc7, 0xb4, 0xf9, 0x59, 0x2f, 0x19, 0x3c, 0xf3, 0xf8,
	0x33, 0xab, 0xaf, 0x00, 0x00, 0x00, 0xff, 0xff, 0x38, 0x57, 0x62, 0x90, 0xa8, 0x01, 0x00, 0x00,
}
